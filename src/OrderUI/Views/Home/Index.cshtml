@using OrderUI.Models.Enum
@using OrderUI.Models.Request
@model OrderUI.Models.ViewModel.IndexViewModel

@{
    ViewData["Title"] = "Avaliação Flowa";
}

<style>
    .modal-content.border-success {
        border-left: 5px solid #198754;
    }

    .modal-header.bg-success {
        background-color: #198754 !important;
        color: white;
    }

    .modal-content.border-danger {
        border-left: 5px solid #dc3545;
    }

    .modal-header.bg-danger {
        background-color: #dc3545 !important;
        color: white;
    }
</style>

<div class="container my-4">
    @if (Model.PositionSummary.Any())
    {
        <h2 class="mb-3">Exposição por Ativo</h2>
        <div class="row">
            @foreach (var asset in Model.PositionSummary)
            {
                <div class="col-md-4">
                    <div class="card mb-3 shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title text-primary text-center display-6">@asset.Symbol</h5>
                            <hr />
                            <p class="card-text mb-1">Exposição: <span class="fw-bold">@asset.Exposure.ToString("C2", new System.Globalization.CultureInfo("pt-BR"))</span></p>
                            <p class="card-text mb-1">Quantidade: <span class="fw-bold">@asset.Quantity</span></p>
                            <p class="card-text text-muted small mt-2">Última Atualização: @asset.LastUpdate.ToString("dd/MM/yyyy HH:mm:ss")</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <div class="my-5 text-center">
        <button type="button" class="btn btn-success btn-lg mx-3" data-bs-toggle="modal" data-bs-target="#orderModal" data-order-type="buy">
            COMPRAR
        </button>
        <button type="button" class="btn btn-danger btn-lg mx-3" data-bs-toggle="modal" data-bs-target="#orderModal" data-order-type="sell">
            VENDER
        </button>
    </div>

    <h2 class="mb-3">Histórico de Ordens</h2>
    <div class="table-responsive">
        <table class="table table-striped table-hover" id="orderHistoryTable">
            <thead class="table-dark">
                <tr>
                    <th>DATA</th>
                    <th>ATIVO</th>
                    <th>TIPO</th>
                    <th>QUANTIDADE</th>
                    <th>PREÇO UNITÁRIO (R$)</th>
                    <th>TOTAL (R$)</th>
                    <th>STATUS</th>
                    <th>MOTIVO REJEIÇÃO</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model.Orders.OrderByDescending(x => x.OrderTime))
                {
                    <tr>
                        <td>@order.OrderTime.ToString("dd/MM/yyyy HH:mm:ss")</td>
                        <td>@order.Symbol</td>
                        <td>
                            @if (order.Side == OrderSide.Buy)
                            {
                                <span class="badge bg-success"> C </span>
                            }
                            else
                            {
                                <span class="badge bg-danger"> V </span>
                            }
                        </td>
                        <td>@order.Quantity</td>
                        <td>@order.Price.ToString("R$ #,##0.00")</td>
                        <td>
                            @{
                                var total = order.Quantity * order.Price;
                                <span>@total.ToString("R$ #,##0.00")</span>
                            }
                        </td>
                        <td>
                            @if (order.Status == OrderStatus.Pending)
                            {
                                <span class="badge bg-dark"> PENDENTE </span>
                            }
                            else if (order.Status == OrderStatus.Accepted)
                            {
                                <span class="badge bg-success"> EXECUTADA </span>
                            }
                            else
                            {
                                <span class="badge bg-danger"> REJEITADA </span>

                            }
                        </td>
                        <td>
                            @order.RejectionReason
                        </td>

                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@{
    ViewBag.AvailableSymbols = Model.AvailableSymbols;
}
<partial name="_OrderFormModal" model='new OrderRequest()' />

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        const MAX_EXPOSURE_LIMIT = 100_000_000;
        let currentOrderType = '';

        const currentExposureData = @Html.Raw(Json.Serialize(Model.PositionSummary.ToDictionary(p => p.Symbol, p => p.Exposure)));

        function formatCurrencyDisplay(value) {
            if (isNaN(value) || value === null) return '';
            return value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
        }

        function calculateOrderValues() {
            const price = parseFloat($('#priceInput').val()) || 0;
            const quantity = parseInt($('#quantityInput').val()) || 0;
            const symbol = $('#symbolSelect').val();

            if (price > 0 && quantity > 0 && symbol) {
                const finalValue = price * quantity;
                $('#finalValueInput').val(formatCurrencyDisplay(finalValue));

                let currentExposureForSymbol = currentExposureData[symbol] || 0;
                let projectedExposure = currentExposureForSymbol;
                projectedExposure += currentOrderType === 'buy' ? finalValue : -finalValue;

                $('#projectedExposureInput').val(formatCurrencyDisplay(projectedExposure));
                $('#exposureAlert').toggleClass('d-none', Math.abs(projectedExposure) <= MAX_EXPOSURE_LIMIT);
            } else {
                $('#finalValueInput, #projectedExposureInput').val('');
                $('#exposureAlert').addClass('d-none');
            }
        }

        $(document).ready(function () {
            $('#orderModal').on('show.bs.modal', function (event) {
                const button = $(event.relatedTarget);
                currentOrderType = button.data('order-type');

                const modal = $(this);
                modal.find('#orderTypeLabel').text(currentOrderType === 'buy' ? 'COMPRA' : 'VENDA');
                modal.find('#orderSideInput').val(currentOrderType === 'buy' ? '@((int)OrderSide.Buy)' : '@((int)OrderSide.Sell)');

                const form = $('#orderForm')[0];
                form.reset();
                $('#orderForm').find('.is-valid, .is-invalid').removeClass('is-valid is-invalid');
                $('#orderForm').find('.text-danger').empty();

                $('#priceInput, #quantityInput, #symbolSelect')
                    .on('input change', calculateOrderValues);

                $('#finalValueInput, #projectedExposureInput').val('');
                $('#exposureAlert').addClass('d-none');

                modal.find('.modal-content')
                    .removeClass('border-success border-danger')
                    .addClass(currentOrderType === 'buy' ? 'border-success' : 'border-danger');

                modal.find('.modal-header')
                    .removeClass('bg-success bg-danger')
                    .addClass(currentOrderType === 'buy' ? 'bg-success' : 'bg-danger');

                calculateOrderValues();
            });

            $('#saveOrderBtn').click(function () {
                if (!$('#orderForm').valid()) return;

                const orderRequest = {
                    symbol: $('#symbolSelect').val(),
                    side: parseInt($('#orderSideInput').val()),
                    quantity: parseInt($('#quantityInput').val()),
                    price: parseFloat($('#priceInput').val())
                };

                $('#saveOrderBtn').prop('disabled', true).text('Enviando...');

                $.ajax({
                    url: '@Url.Action("CreateOrder", "Home")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(orderRequest),
                    success: function (response) {
                        if (response.success) {
                            alert(response.message);
                            $('#orderModal').modal('hide');
                            location.reload();
                        } else {
                            alert('Erro: ' + response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Erro AJAX:', status, error, xhr.responseText);
                        alert('Ocorreu um erro ao enviar a ordem. Verifique o console do navegador.');
                    },
                    complete: function () {
                        $('#saveOrderBtn').prop('disabled', false).text('ENVIAR');
                    }
                });
            });
        });

    </script>
}